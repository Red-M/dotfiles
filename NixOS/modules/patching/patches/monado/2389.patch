From 4aad70c7dede9f45f9f74bfe1f1ad895735d5c32 Mon Sep 17 00:00:00 2001
From: Beyley Thomas <ep1cm1n10n123@gmail.com>
Date: Wed, 8 Jan 2025 19:59:38 -0800
Subject: [PATCH] xrt/steamvr_lh: Implement mercury hand tracking

---
 doc/changes/xrt/mr.2389.md                    |   1 +
 src/xrt/auxiliary/vive/vive_config.c          |   2 +-
 src/xrt/auxiliary/vive/vive_config.h          |   2 +-
 src/xrt/drivers/steamvr_lh/steamvr_lh.cpp     |  51 +++-
 .../drivers/steamvr_lh/steamvr_lh_interface.h |   4 +-
 .../targets/common/target_builder_steamvr.c   | 222 +++++++++++++++++-
 6 files changed, 268 insertions(+), 14 deletions(-)
 create mode 100644 doc/changes/xrt/mr.2389.md

diff --git a/doc/changes/xrt/mr.2389.md b/doc/changes/xrt/mr.2389.md
new file mode 100644
index 0000000000..6b40e04e4e
--- /dev/null
+++ b/doc/changes/xrt/mr.2389.md
@@ -0,0 +1 @@
+- xrt/steamvr_lh: Implement mercury hand tracking
\ No newline at end of file
diff --git a/src/xrt/auxiliary/vive/vive_config.c b/src/xrt/auxiliary/vive/vive_config.c
index 54a9ec30c9..babcfee7b1 100644
--- a/src/xrt/auxiliary/vive/vive_config.c
+++ b/src/xrt/auxiliary/vive/vive_config.c
@@ -401,7 +401,7 @@ _calculate_fov(struct vive_config *d)
  */
 
 bool
-vive_config_parse(struct vive_config *d, char *json_string, enum u_logging_level log_level)
+vive_config_parse(struct vive_config *d, const char *json_string, enum u_logging_level log_level)
 {
 	d->log_level = log_level;
 	vive_init_defaults(d);
diff --git a/src/xrt/auxiliary/vive/vive_config.h b/src/xrt/auxiliary/vive/vive_config.h
index 6e04cf5bde..980cb9e42f 100644
--- a/src/xrt/auxiliary/vive/vive_config.h
+++ b/src/xrt/auxiliary/vive/vive_config.h
@@ -261,7 +261,7 @@ struct vive_controller_config
  * @ingroup aux_vive
  */
 bool
-vive_config_parse(struct vive_config *d, char *json_string, enum u_logging_level log_level);
+vive_config_parse(struct vive_config *d, const char *json_string, enum u_logging_level log_level);
 
 /*!
  * Free any allocated resources on this config.
diff --git a/src/xrt/drivers/steamvr_lh/steamvr_lh.cpp b/src/xrt/drivers/steamvr_lh/steamvr_lh.cpp
index 1ae4460720..e6e0ccfe0a 100644
--- a/src/xrt/drivers/steamvr_lh/steamvr_lh.cpp
+++ b/src/xrt/drivers/steamvr_lh/steamvr_lh.cpp
@@ -30,6 +30,7 @@
 #include "util/u_device.h"
 
 #include "math/m_api.h"
+#include "vive/vive_config.h"
 
 namespace {
 
@@ -742,19 +743,24 @@ destroy(struct xrt_system_devices *xsysd)
 }
 
 extern "C" enum xrt_result
-steamvr_lh_create_devices(struct xrt_system_devices **out_xsysd)
+steamvr_lh_create_devices(struct xrt_system_devices **out_xsysd,
+                          vive_config *out_hmd_config,
+                          bool *out_found_controllers)
 {
 	u_logging_level level = debug_get_log_option_lh_log();
 	// The driver likes to create a bunch of transient folders -
 	// let's try to make sure they're created where they normally are.
-	std::filesystem::path dir = STEAM_INSTALL_DIR + "/config/lighthouse";
-	if (!std::filesystem::exists(dir)) {
+	std::filesystem::path lighthouse_config_dir = STEAM_INSTALL_DIR + "/config/lighthouse";
+	if (!std::filesystem::exists(lighthouse_config_dir)) {
 		U_LOG_IFL_W(level,
 		            "Couldn't find lighthouse config folder (%s)- transient folders will be created in current "
 		            "working directory (%s)",
-		            dir.c_str(), std::filesystem::current_path().c_str());
+		            lighthouse_config_dir.c_str(), std::filesystem::current_path().c_str());
+
+		// Mark the dir with the lighthouse configs as the current working dir
+		lighthouse_config_dir = std::filesystem::current_path();
 	} else {
-		std::filesystem::current_path(dir);
+		std::filesystem::current_path(lighthouse_config_dir);
 	}
 
 	std::string steamvr{};
@@ -825,23 +831,58 @@ steamvr_lh_create_devices(struct xrt_system_devices **out_xsysd)
 		return xrt_result::XRT_ERROR_DEVICE_CREATION_FAILED;
 	}
 
+	if (out_found_controllers == NULL) {
+		U_LOG_IFL_E(level, "Invalid output found controllers pointer");
+		return xrt_result::XRT_ERROR_DEVICE_CREATION_FAILED;
+	}
+
+	if (out_hmd_config == NULL) {
+		U_LOG_IFL_E(level, "Invalid output hmd config pointer");
+		return xrt_result::XRT_ERROR_DEVICE_CREATION_FAILED;
+	}
+
 	struct xrt_system_devices *xsysd = NULL;
 	xsysd = &svrs->base;
 
 	xsysd->destroy = destroy;
 	xsysd->get_roles = get_roles;
 
+	memset(out_hmd_config, 0, sizeof(*out_hmd_config));
+	out_hmd_config->log_level = level;
+
 	// Include the HMD
 	if (svrs->ctx->hmd) {
+		std::string serial = svrs->ctx->hmd->serial;
+		std::transform(serial.begin(), serial.end(), serial.begin(),
+		               [](unsigned char c) { return std::tolower(c); });
+
+		auto device_config_path = lighthouse_config_dir / serial / "config.json";
+
+		if (std::filesystem::exists(device_config_path)) {
+			std::ifstream t(device_config_path);
+			std::stringstream buffer;
+			buffer << t.rdbuf();
+
+			if (!vive_config_parse(out_hmd_config, buffer.str().c_str(), level)) {
+				U_LOG_IFL_E(level, "Invalid HMD config file");
+				return xrt_result::XRT_ERROR_DEVICE_CREATION_FAILED;
+			}
+		} else {
+			U_LOG_IFL_E(level, "Lighthouse device config file for %s missing! checked path %s\n",
+			            svrs->ctx->hmd->serial, device_config_path.c_str());
+		}
+
 		// Always have a head at index 0 and iterate dev count.
 		xsysd->xdevs[xsysd->xdev_count] = svrs->ctx->hmd;
 		xsysd->static_roles.head = xsysd->xdevs[xsysd->xdev_count++];
 	}
 
+	*out_found_controllers = false;
 	// Include the controllers
 	for (size_t i = 0; i < MAX_CONTROLLERS; i++) {
 		if (svrs->ctx->controller[i]) {
 			xsysd->xdevs[xsysd->xdev_count++] = svrs->ctx->controller[i];
+			*out_found_controllers = true;
 		}
 	}
 
diff --git a/src/xrt/drivers/steamvr_lh/steamvr_lh_interface.h b/src/xrt/drivers/steamvr_lh/steamvr_lh_interface.h
index 23621fe688..0813fc6b30 100644
--- a/src/xrt/drivers/steamvr_lh/steamvr_lh_interface.h
+++ b/src/xrt/drivers/steamvr_lh/steamvr_lh_interface.h
@@ -34,7 +34,9 @@ extern "C" {
  * @ingroup drv_steamvr_lh
  */
 enum xrt_result
-steamvr_lh_create_devices(struct xrt_system_devices **out_xsysd);
+steamvr_lh_create_devices(struct xrt_system_devices **out_xsysd,
+                          struct vive_config *out_hmd_config,
+                          bool *out_found_controllers);
 
 
 #ifdef __cplusplus
diff --git a/src/xrt/targets/common/target_builder_steamvr.c b/src/xrt/targets/common/target_builder_steamvr.c
index 7b70e6b7c7..045939e733 100644
--- a/src/xrt/targets/common/target_builder_steamvr.c
+++ b/src/xrt/targets/common/target_builder_steamvr.c
@@ -25,6 +25,7 @@
 #include "util/u_system_helpers.h"
 
 #include "vive/vive_builder.h"
+#include "vive/vive_config.h"
 
 #include "target_builder_interface.h"
 
@@ -33,6 +34,13 @@
 
 #include "xrt/xrt_space.h"
 #include "util/u_space_overseer.h"
+#include "vive/vive_calibration.h"
+#include "tracking/t_hand_tracking.h"
+#include "ht/ht_interface.h"
+#include "multi_wrapper/multi.h"
+#include "ht_ctrl_emu/ht_ctrl_emu_interface.h"
+#include "util/u_sink.h"
+#include "xrt/xrt_frameserver.h"
 
 #ifndef XRT_BUILD_DRIVER_STEAMVR_LIGHTHOUSE
 #error "This builder requires the SteamVR Lighthouse driver"
@@ -64,6 +72,7 @@ DEBUG_GET_ONCE_LOG_OPTION(svr_log, "STEAMVR_LH_LOG", U_LOGGING_INFO)
  */
 
 DEBUG_GET_ONCE_BOOL_OPTION(steamvr_enable, "STEAMVR_LH_ENABLE", false)
+DEBUG_GET_ONCE_TRISTATE_OPTION(lh_handtracking, "LH_HANDTRACKING")
 
 static const char *driver_list[] = {
     "steamvr_lh",
@@ -77,6 +86,9 @@ struct steamvr_builder
 	struct xrt_device *left_ht, *right_ht;
 
 	bool is_valve_index;
+
+	struct xrt_frame_context *xfctx;
+	struct xrt_fs *xfs;
 };
 
 /*
@@ -93,8 +105,11 @@ steamvr_estimate_system(struct xrt_builder *xb,
 {
 	struct steamvr_builder *svrb = (struct steamvr_builder *)xb;
 
-	// Currently no built in support for hand tracking.
+#ifdef XRT_BUILD_DRIVER_HANDTRACKING
+	bool have_hand_tracking = true;
+#else
 	bool have_hand_tracking = false;
+#endif
 
 	if (debug_get_bool_option_steamvr_enable()) {
 		return vive_builder_estimate( //
@@ -115,6 +130,70 @@ steamvr_destroy(struct xrt_builder *xb)
 	free(svrb);
 }
 
+static uint32_t
+get_selected_mode(struct xrt_fs *xfs)
+{
+	struct xrt_fs_mode *modes = NULL;
+	uint32_t count = 0;
+	xrt_fs_enumerate_modes(xfs, &modes, &count);
+
+	SVR_ASSERT(count != 0, "No stream modes found in Index camera");
+
+	uint32_t selected_mode = 0;
+	for (uint32_t i = 0; i < count; i++) {
+		if (modes[i].format == XRT_FORMAT_YUYV422) {
+			selected_mode = i;
+			break;
+		}
+	}
+
+	free(modes);
+	return selected_mode;
+}
+
+static void
+on_video_device(struct xrt_prober *xp,
+                struct xrt_prober_device *pdev,
+                const char *product,
+                const char *manufacturer,
+                const char *serial,
+                void *ptr)
+{
+	struct steamvr_builder *svrb = (struct steamvr_builder *)ptr;
+
+	// Hardcoded for the Index.
+	if (product != NULL && manufacturer != NULL) {
+		if ((strcmp(product, "3D Camera") == 0) && (strcmp(manufacturer, "Etron Technology, Inc.") == 0)) {
+			xrt_prober_open_video_device(xp, pdev, svrb->xfctx, &svrb->xfs);
+			return;
+		}
+	}
+}
+
+static bool
+stream_data_sources(struct steamvr_builder *svrb, struct xrt_prober *xp, struct xrt_slam_sinks sinks)
+{
+	// Open frame server
+	xrt_prober_list_video_devices(xp, on_video_device, svrb);
+	if (svrb->xfs == NULL) {
+		SVR_WARN("Couldn't find Index camera at all. Is it plugged in?");
+		return false;
+	}
+
+	uint32_t mode = get_selected_mode(svrb->xfs);
+
+	bool bret = xrt_fs_stream_start(svrb->xfs, sinks.cams[0], XRT_FS_CAPTURE_TYPE_TRACKING, mode);
+	if (!bret) {
+		SVR_ERROR("Unable to start data streaming");
+		return false;
+	}
+
+	SVR_DEBUG("Started camera data streaming");
+
+	return true;
+}
+
+
 static xrt_result_t
 steamvr_open_system(struct xrt_builder *xb,
                     cJSON *config,
@@ -128,13 +207,24 @@ steamvr_open_system(struct xrt_builder *xb,
 	assert(out_xsysd != NULL);
 	assert(*out_xsysd == NULL);
 
-	enum xrt_result result = steamvr_lh_create_devices(out_xsysd);
+	struct vive_config hmd_config = {0};
+
+	bool found_controllers;
+	enum xrt_result result = steamvr_lh_create_devices(out_xsysd, &hmd_config, &found_controllers);
 
 	if (result != XRT_SUCCESS) {
 		SVR_ERROR("Unable to create devices");
 		return result;
 	}
 
+#ifdef XRT_BUILD_DRIVER_HANDTRACKING
+	bool have_hand_tracking = true;
+#else
+	bool have_hand_tracking = false;
+#endif
+
+	enum debug_tristate_option hand_wanted = debug_get_tristate_option_lh_handtracking();
+
 	struct xrt_system_devices *xsysd = NULL;
 	xsysd = *out_xsysd;
 
@@ -145,11 +235,131 @@ steamvr_open_system(struct xrt_builder *xb,
 
 	svrb->head = xsysd->static_roles.head;
 
-	svrb->left_ht = u_system_devices_get_ht_device_left(xsysd);
-	xsysd->static_roles.hand_tracking.left = svrb->left_ht;
+	struct xrt_device *left_ht = NULL, *right_ht = NULL;
+
+	left_ht = u_system_devices_get_ht_device_left(xsysd);
+	right_ht = u_system_devices_get_ht_device_right(xsysd);
+
+	bool hand_enabled = false;
+
+	svrb->xfctx = &u_system_devices(xsysd)->xfctx;
+
+	SVR_INFO("a\n");
+
+#ifdef XRT_BUILD_DRIVER_HANDTRACKING
+	SVR_INFO("is valve index: %d\n", svrb->is_valve_index);
+
+	if (svrb->is_valve_index && have_hand_tracking) {
+		if (hand_wanted == DEBUG_TRISTATE_ON) {
+			hand_enabled = true;
+		} else if (hand_wanted == DEBUG_TRISTATE_AUTO) {
+			hand_enabled = !found_controllers;
+		}
+	}
+
+	SVR_INFO("hand wanted: %d, hand_enabled: %d\n", hand_wanted, hand_enabled);
+
+	if (hand_enabled && svrb->head != NULL) {
+		struct xrt_device *hand_devices[2] = {NULL};
+		struct xrt_slam_sinks *sinks = NULL;
+
+		// Hand tracking calibration
+		struct t_stereo_camera_calibration *stereo_calib = NULL;
+		struct xrt_pose head_in_left_cam;
+		vive_get_stereo_camera_calibration(&hmd_config, &stereo_calib, &head_in_left_cam);
+
+		// zero-initialized out of paranoia
+		struct t_camera_extra_info info = {0};
+
+		info.views[0].camera_orientation = CAMERA_ORIENTATION_0;
+		info.views[1].camera_orientation = CAMERA_ORIENTATION_0;
+
+		info.views[0].boundary_type = HT_IMAGE_BOUNDARY_CIRCLE;
+		info.views[1].boundary_type = HT_IMAGE_BOUNDARY_CIRCLE;
+
+
+		//!@todo This changes by like 50ish pixels from device to device. For now, the solution is simple: just
+		//! make the circle a bit bigger than we'd like.
+		// Maybe later we can do vignette calibration? Write a tiny optimizer that tries to fit Index's
+		// gradient? Unsure.
+		info.views[0].boundary.circle.normalized_center.x = 0.5f;
+		info.views[0].boundary.circle.normalized_center.y = 0.5f;
+
+		info.views[1].boundary.circle.normalized_center.x = 0.5f;
+		info.views[1].boundary.circle.normalized_center.y = 0.5f;
+
+		info.views[0].boundary.circle.normalized_radius = 0.55;
+		info.views[1].boundary.circle.normalized_radius = 0.55;
+
+		struct t_hand_tracking_create_info create_info = {.cams_info = info, .masks_sink = NULL};
+
+		struct xrt_device *ht_device = NULL;
+		int create_status = ht_device_create( //
+		    svrb->xfctx,                      //
+		    stereo_calib,                     //
+		    create_info,                      //
+		    &sinks,                           //
+		    &ht_device);
+		if (create_status != 0) {
+			SVR_WARN("Failed to create hand tracking device\n");
+			return false;
+		}
+
+		struct xrt_frame_sink *entry_left_sink = NULL;
+		struct xrt_frame_sink *entry_right_sink = NULL;
+		struct xrt_frame_sink *entry_sbs_sink = NULL;
+
+		ht_device = multi_create_tracking_override( //
+		    XRT_TRACKING_OVERRIDE_ATTACHED,         //
+		    ht_device,                              //
+		    svrb->head,                             //
+		    XRT_INPUT_GENERIC_HEAD_POSE,            //
+		    &head_in_left_cam);                     //
+
+		int created_devices = cemu_devices_create( //
+		    svrb->head,                            //
+		    ht_device,                             //
+		    hand_devices);                         //
+		if (created_devices != 2) {
+			SVR_WARN("Unexpected amount of hand devices created (%d)\n", create_status);
+			xrt_device_destroy(&ht_device);
+			return false;
+		}
+
+		entry_left_sink = sinks->cams[0];
+		entry_right_sink = sinks->cams[1];
+		u_sink_stereo_sbs_to_slam_sbs_create(svrb->xfctx, entry_left_sink, entry_right_sink, &entry_sbs_sink);
+		u_sink_create_format_converter(svrb->xfctx, XRT_FORMAT_L8, entry_sbs_sink, &entry_sbs_sink);
+
+		//! @todo Using a single slot queue is wrong for SLAM
+		u_sink_simple_queue_create(svrb->xfctx, entry_sbs_sink, &entry_sbs_sink);
+
+		struct xrt_slam_sinks entry_sinks = {
+		    .cam_count = 1,
+		    .cams = {entry_sbs_sink},
+		    .imu = NULL,
+		    .gt = NULL,
+		};
+
+		if (hand_devices[0] != NULL) {
+			xsysd->xdevs[xsysd->xdev_count++] = hand_devices[0];
+			left_ht = hand_devices[0];
+		}
+
+		if (hand_devices[1] != NULL) {
+			xsysd->xdevs[xsysd->xdev_count++] = hand_devices[1];
+			right_ht = hand_devices[1];
+		}
+
+		stream_data_sources(svrb, xp, entry_sinks);
+	}
+#endif /* XRT_BUILD_DRIVER_HANDTRACKING */
+
+	svrb->left_ht = left_ht;
+	xsysd->static_roles.hand_tracking.left = left_ht;
 
-	svrb->right_ht = u_system_devices_get_ht_device_right(xsysd);
-	xsysd->static_roles.hand_tracking.right = svrb->right_ht;
+	svrb->right_ht = right_ht;
+	xsysd->static_roles.hand_tracking.right = right_ht;
 
 	/*
 	 * Space overseer.
-- 
GitLab


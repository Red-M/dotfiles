diff --git a/util/ssl_fix.py b/util/ssl_fix.py
index 1551951..b61e109 100644
--- a/util/ssl_fix.py
+++ b/util/ssl_fix.py
@@ -44,7 +44,9 @@ try:
 except ImportError:
   pass
 
-def fix(ssl_adapters,RedServ):
+def fix(ssl_adapters,RedServ,curr_dir):
+    global current_dir
+    current_dir = curr_dir
     __ssl_patch_version__ = '1.2.2'
     RedServ.debugger(3,'Loaded RedServ SSL patch version: '+__ssl_patch_version__)
     default_ciphers = (
@@ -204,7 +206,8 @@ def fix(ssl_adapters,RedServ):
                     # This is almost certainly due to the cherrypy engine
                     # 'pinging' the socket to assert it's connectable;
                     # the 'ping' isn't SSL.
-                    return None, {}
+                    pass
+                    # return None, {}
                 elif e.errno == ssl.SSL_ERROR_SSL:
                     if e.args[1].endswith('http request'):
                         # The client is speaking HTTP to an HTTPS server.
@@ -212,7 +215,8 @@ def fix(ssl_adapters,RedServ):
                 elif e.args[1].endswith('unknown protocol'):
                     # The client is speaking some non-HTTP protocol.
                     # Drop the conn.
-                    return None, {}
+                    pass
+                    # return None, {}
                 raise
 
             return s, self.get_environ(s)
diff --git a/util/ssl_fix3.py b/util/ssl_fix3.py
index 00009bc..e6a06e4 100644
--- a/util/ssl_fix3.py
+++ b/util/ssl_fix3.py
@@ -42,7 +42,9 @@ try:
 except ImportError:
   pass
 
-def fix(ssl_adapters,RedServ):
+def fix(ssl_adapters,RedServ,curr_dir):
+    global current_dir
+    current_dir = curr_dir
     ciphers = (
     'ECDHE-ECDSA-CHACHA20-POLY1305',
     'ECDHE-RSA-CHACHA20-POLY1305',
@@ -146,7 +148,7 @@ def fix(ssl_adapters,RedServ):
 
       def get_context(self):
         """Return an SSL.Context from self attributes."""
-        
+
         def npn_callback(connection):
             if connection.total_renegotiations()>3:
                 connection.shutdown()
@@ -155,7 +157,7 @@ def fix(ssl_adapters,RedServ):
             if not connection.get_servername()==None:
                 connection.set_tlsext_host_name(connection.get_servername().encode('utf-8'))
             return([b'http/1.0'])
-        
+
         def create_ssl_context(dhparams,ciphers,privkey,ca_chain,cert):
             c = OpenSSL.SSL.Context(OpenSSL.SSL.SSLv23_METHOD)
             c.set_options(OpenSSL.SSL.OP_NO_COMPRESSION | OpenSSL.SSL.OP_SINGLE_DH_USE | OpenSSL.SSL.OP_CIPHER_SERVER_PREFERENCE | OpenSSL.SSL.OP_NO_SSLv2 | OpenSSL.SSL.OP_NO_SSLv3)
@@ -168,7 +170,7 @@ def fix(ssl_adapters,RedServ):
             c.use_certificate_file(cert)
             c.set_npn_advertise_callback(npn_callback)
             return(c)
-        
+
         def pick_certificate(connection):
             config = RedServ.get_config()
             key = None
@@ -215,7 +217,7 @@ def fix(ssl_adapters,RedServ):
                 if not hostname_recieved==None:
                     connection.set_tlsext_host_name(hostname_recieved.encode('utf-8'))
                 connection.set_context(nc)
-        
+
         dh_key_file_loc = os.path.join(current_dir,'util','tmp_dh_file')
         if not os.path.exists(dh_key_file_loc):
             print("INFO: Generating DH key for HTTPS. Please wait.")
@@ -228,4 +230,4 @@ def fix(ssl_adapters,RedServ):
         return c
 
     ssl_adapters['custom-pyopenssl'] = Pyopenssl
-    return(ssl_adapters)
\ No newline at end of file
+    return(ssl_adapters)
diff --git a/webserver3.py b/webserver3.py
index 0c09118..202958f 100644
--- a/webserver3.py
+++ b/webserver3.py
@@ -22,6 +22,7 @@
 #  - Logging needs to be replaced with a backgroundtask using: cherrypy.process.plugins.BackgroundTask(interval, function, args=[], kwargs={}, bus=None)
 #  - Investigate SSL further and see if we can get an A+ instead of A on SSL labs
 #  - Optimize
+import argparse
 import cherrypy
 import os
 import sys
@@ -43,6 +44,7 @@ import re
 import traceback
 import cgi
 import gc
+import pathlib
 from watchdog.observers import Observer as watchdog_observer
 from watchdog.events import FileSystemEventHandler as watchdog_file_event_handler
 try:
@@ -58,16 +60,24 @@ except Exception as e:
     print('ERROR: Could not load requests library.')
 
 
+
 os.chdir('.' or sys.path[0])
-current_dir = os.path.join(os.getcwd(),os.sep.join(sys.argv[0].split(os.sep)[0:-1]))
-if current_dir.endswith('.'):
-    current_dir = current_dir[0:-1]
-if sys.argv[0].split(os.sep)[-1] in os.listdir(current_dir):
+lib_dir = os.path.join(os.getcwd(),os.sep.join(sys.argv[0].split(os.sep)[0:-1]))
+if lib_dir.endswith('.'):
+    lib_dir = lib_dir[0:-1]
+if sys.argv[0].split(os.sep)[-1] in os.listdir(lib_dir):
     print('INFO: Found webserver path')
+    sys.path.insert(1, os.path.dirname(__file__))
 else:
     print('INFO: Bad web server path')
     exit()
 
+parser = argparse.ArgumentParser()
+parser.add_argument("webroot",type=pathlib.Path,nargs='?',default=lib_dir)
+args = parser.parse_args()
+current_dir = str(args.webroot.resolve())
+os.chdir(current_dir)
+print('INFO: Serving from '+current_dir)
 
 exed = False
 if current_dir.endswith('.zip'):
@@ -1015,7 +1025,7 @@ def conf_reload(conf):
     config_cache[0] = new_conf
     if not old_time==config_cache[1]:
         from util import ssl_fix
-        ssl_adapters = ssl_fix.fix(ssl_adapters,RedServ)
+        ssl_adapters = ssl_fix.fix(ssl_adapters,RedServ,current_dir)
         new_conf['HTTP']['enabled'] = old_conf['HTTP']['enabled']
         new_conf['HTTPS']['enabled'] = old_conf['HTTPS']['enabled']
         if (not new_conf['HTTP']['ports']==old_conf['HTTP']['ports']) and False: #disabled for now, has issues wherein the entire web server locks up or new ports don't start.
@@ -1571,7 +1581,7 @@ def web_init(watchdogs):
             from cherrypy.wsgiserver import ssl_adapters
         except Exception as e:
             from cheroot.server import ssl_adapters
-        ssl_adapters = ssl_fix.fix(ssl_adapters,RedServ)
+        ssl_adapters = ssl_fix.fix(ssl_adapters,RedServ,current_dir)
         if not (os.path.exists(os.path.join(current_dir,conf['HTTPS']['cert'])) and os.path.exists(os.path.join(current_dir,conf['HTTPS']['cert_private_key']))):
             SSL_cert_gen(RedServ.sysinfo(),os.path.abspath('certs'))
         if conf['HTTPS']['cert']=='':
@@ -1718,3 +1728,4 @@ if __name__ == '__main__':
     page_observer.join()
     config_observer.join()
     exit()
+

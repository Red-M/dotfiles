# Default
style.cpp.32=$(tstyle.default)
# White space
style.cpp.0=$(tstyle.whitespace)
# Comment: /* */.
style.cpp.1=$(tstyle.comment.box)
# Line Comment: //.
style.cpp.2=$(tstyle.comment.line)
# Doc comment: block comments beginning with /** or /*!
style.cpp.3=$(tstyle.comment.doc)
# Number
style.cpp.4=$(tstyle.number)
# Keyword
style.cpp.5=$(tstyle.keyword)
# String
style.cpp.6=$(tstyle.string.double)
# Character
style.cpp.7=$(tstyle.number)
# UUIDs (only in IDL)
style.cpp.8=$(tstyle.support)
# Preprocessor
style.cpp.9=$(tstyle.preprocessor)
# Operators
style.cpp.10=$(tstyle.operator)
# Identifiers
style.cpp.11=
# End of line where string is not closed
style.cpp.12=$(tstyle.mismatch)
# Verbatim strings for C#
style.cpp.13=$(tstyle.string.other)
# Regular expressions for JavaScript
style.cpp.14=$(tstyle.string.regex)
# Doc Comment Line: line comments beginning with /// or //!.
style.cpp.15=$(tstyle.comment.doc)
# Keywords2
style.cpp.16=$(tstyle.function)
# Comment keyword
style.cpp.17=$(tstyle.support)
# Comment keyword error
style.cpp.18=$(tstyle.error)
# Global class
style.cpp.19=$(tstyle.class)
# Raw strings for C++0x
style.cpp.20=$(tstyle.string.other)
# Triple-quoted strings for Vala
style.cpp.21=$(tstyle.string.other)
# Hash-quoted strings for Pike
style.cpp.22=$(tstyle.string.other)
# Preprocessor stream comment
style.cpp.23=$(tstyle.comment.box)
# Preprocessor stream doc comment
style.cpp.24=$(tstyle.comment.doc)
# User defined literals
style.cpp.25=$(tstyle.variable)
# Task Marker
style.cpp.26=$(tstyle.support)
# Escape sequence
style.cpp.27=$(tstyle.support)

# Inactive states are 64 greater than their active counterparts

# White space
style.cpp.64=$(style.cpp.0)
# Comment: /* */.
style.cpp.65=$(style.cpp.1)
# Line Comment: //.
style.cpp.66=$(style.cpp.2)
# Doc comment: block comments beginning with /** or /*!
style.cpp.67=$(style.cpp.3)
# Number
style.cpp.68=$(tstyle.base),fore:$(tcolor.number.dim)
# Keyword
style.cpp.69=$(tstyle.base),fore:$(tcolor.keyword.dim)
# Double quoted string
style.cpp.70=$(tstyle.base),fore:$(tcolor.string.dim)
# Single quoted string
style.cpp.71=$(tstyle.base),fore:$(tcolor.string.dim)
# UUIDs (only in IDL)
style.cpp.72=$(tstyle.base),fore:$(tcolor.string.dim)
# Preprocessor
style.cpp.73=$(tstyle.base),fore:$(tcolor.class.dim)
# Operators
style.cpp.74=$(tstyle.base),fore:$(tcolor.fore.dim)
# Identifiers
style.cpp.75=$(tstyle.base),fore:$(tcolor.fore.dim)
# End of line where string is not closed
style.cpp.76=$(style.cpp.12)
# Verbatim strings for C#
style.cpp.77=$(tstyle.base),fore:$(tcolor.string.dim)
# Regular expressions for JavaScript
style.cpp.78=$(tstyle.base),fore:$(tcolor.string.dim)
# Doc Comment Line: line comments beginning with /// or //!.
style.cpp.79=$(style.cpp.15)
# Keywords2
style.cpp.80=$(tstyle.base),fore:$(tcolor.function.dim)
# Comment keyword
style.cpp.81=$(style.cpp.17)
# Comment keyword error
style.cpp.82=$(style.cpp.18)
# Global class
style.cpp.83=$(tstyle.base),fore:$(tcolor.class.dim)
# Raw strings for C++0x
style.cpp.84=$(tstyle.base),fore:$(tcolor.string.dim)
# Triple-quoted strings for Vala
style.cpp.85=$(tstyle.base),fore:$(tcolor.string.dim)
# Hash-quoted strings for Pike
style.cpp.86=$(tstyle.base),fore:$(tcolor.string.dim)
# Preprocessor stream comment
style.cpp.87=$(style.cpp.23)
# Preprocessor stream doc comment
style.cpp.88=$(style.cpp.24)
# User defined literals
style.cpp.89=$(tstyle.base),fore:$(tcolor.variable.dim)
# Task Marker
style.cpp.90=$(tstyle.base),fore:$(tcolor.support.dim)
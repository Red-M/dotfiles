
# Generic
# source.files=*.asm;*.c;*.cc;*.cpp;*.cxx;*.cs;*.h;*.hh;*.hxx;*.hpp;\
# *.idl;*.odl;*.rc;*.rc2;*.dlg;*.def;\
# *.vb;*.vbs;*.bas;*.frm;*.cls;*.ctl;\
# *.java;*.js;*.py;*.pyw;*.pl;*.rb;*.cgi;*.lua;*.conf;\
# make*;*.mak;\
# *.properties;*.html;*.xml;*.iface;*.bat;*.e;*.m;*.mm;\
# *.sh;*.patch;*.go;*.md


# Bash
*language.bash=BASH|sh||
colour.bash.heredoc=$(colour.embedded.comment)
comment.block.bash=#
command.go.$(file.patterns.bash)=bash $(FileNameExt)

# Batch
comment.block.batch=REM ~

# HCL
file.patterns.hcl=*.tf
shbang.hcl=hcl
filter.hcl=HCL (tf)|$(file.patterns.hcl)|

# lexer.$(file.patterns.hcl)=hcl
lexer.$(file.patterns.hcl)=script_hcl
*filter.hcl=$(filter.hcl)
*language.hcl=HCL|hcl||

comment.block.hcl=#
comment.block.script_hcl=#

# JSON
file.patterns.json=*.json;*.eslintrc;*.jshintrc;*.jsonld
*source.patterns.json=$(file.patterns.json);
filter.json=JSON (json eshintrc jshintrc)|$(file.patterns.json)|
*filter.json=$(filter.json)

lexer.$(file.patterns.json)=json
*language.json=JSON|json||
lexer.json.allow.comments=1
lexer.json.escape.sequence=1

# JSON keywords
keywords.$(file.patterns.json)=false true null
# JSON-LD keywords
keywords2.$(file.patterns.json)=@id @context @type @value @language @container \
@list @set @reverse @index @base @vocab @graph

# Makefile
comment.block.makefile=#

# Markdown
file.patterns.markdown=*.md;*.markdown
filter.markdown=Markdown (md markdown)|$(file.patterns.markdown)|

lexer.$(file.patterns.markdown)=markdown

# Pascal
filter.pascal=Pascal (dpr dpk pas dfm inc pp)|*.dpr;*.dpk;*.pas;*.dfm;*.inc;*.pp|

*filter.pascal=$(filter.pascal)

file.patterns.pascal=*.dpr;*.pas;*.dfm;*.inc;*.pp
file.patterns.pascal.package=*.dpk
file.patterns.pascal.all=$(file.patterns.pascal);$(file.patterns.pascal.package)
lexer.$(file.patterns.pascal.all)=pascal
*language.pascal=Pascal|pas||

keywordclass.pascal=absolute abstract and array as asm assembler automated begin case \
cdecl class const constructor delayed deprecated destructor dispid dispinterface \
div do downto dynamic else end except experimental export exports external far \
file final finalization finally for forward function goto helper if \
implementation in inherited initialization inline interface is label library \
message mod near nil not object of on operator or out overload override packed \
pascal platform private procedure program property protected public published \
raise record reference register reintroduce repeat resourcestring safecall \
sealed set shl shr static stdcall strict string then threadvar to try type unit \
unsafe until uses var varargs virtual while winapi with xor

keywordclass.pascal.smart=add default implements index name nodefault read readonly \
remove stored write writeonly

keywordclass.pascal.package=package contains requires

keywords.$(file.patterns.pascal)=$(keywordclass.pascal) $(keywordclass.pascal.smart)
keywords.$(file.patterns.pascal.package)=$(keywordclass.pascal) $(keywordclass.pascal.smart) $(keywordclass.pascal.package)

# If enabled some keywords will only be highlightend in appropriate context.
# As implemented those are keywords related to property and DLL exports declarations
lexer.pascal.smart.highlighting=1

comment.block.pascal=//~
comment.stream.start.pascal={
comment.stream.end.pascal=}
comment.box.start.pascal=(*
comment.box.middle.pascal= *
comment.box.end.pascal= *)

statement.indent.$(file.patterns.pascal)=9 case class do else for then \
private protected public published repeat try while type
statement.end.$(file.patterns.pascal)=13 ;
statement.lookback.$(file.patterns.pascal)=20
block.start.$(file.patterns.pascal)=9 begin
block.end.$(file.patterns.pascal)=9 end

# Powershell
comment.block.powershell=#~
comment.block.at.line.start.powershell=1

# Python
lexer.python.identifier.attributes=2
lexer.python.decorator.attributes=2

file.patterns.py=*.py;*.pyw;*.pyx;*.pxd
file.patterns.scons=SConstruct;SConscript
shbang.python=py
filter.python=Python (py pyw pyx pxd)|$(file.patterns.py)|


lexer.$(file.patterns.py)=python
lexer.$(file.patterns.scons)=python

keywordclass.python2=and as assert break class continue def del elif \
else except exec finally for from global if import in is lambda not \
or pass raise return try while with yield

keywordclass.python3=False None True and as assert break class continue \
def del elif else except finally for from global if import in is lambda \
nonlocal not or pass raise return try while with yield await async

keywordclass.python=$(keywordclass.python3) $(keywordclass.python2)

# Extra keywords for cython
keywordclass.cython=cdef cimport cpdef

keywords.$(file.patterns.py)=$(keywordclass.python) $(keywordclass.cython)
keywords.$(file.patterns.scons)=$(keywordclass.python)

# If you uncomment the 3 lines below,
# and put some words after "keywordclass2.python=",
# those words will be styled by style.python.14

keywordclass2.python=print self sorted len dir
keywords2.$(file.patterns.py)=$(keywordclass2.python)
keywords2.$(file.patterns.scons)=$(keywordclass2.python)

# Use 2 sets of substyles to highlight standard library modules and
# imports from the future.
# Additional identifier sets can be added by incrementing the  next
# line's value and adding extra definitions similar to below.

substylewords.11.1.$(file.patterns.py)=\
__main__ _dummy_thread _thread abc aifc argparse \
array ast asynchat asyncio asyncore atexit audioop \
base64 bdb binascii binhex bisect builtins bz2 \
calendar cgi cgitb chunk cmath cmd code codecs \
codeop collections colorsys compileall concurrent \
configparser contextlib copy copyreg crypt csv \
ctypes curses datetime dbm decimal difflib dis \
distutils dummy_threading email ensurepip enum \
errno faulthandler fcntl filecmp fileinput fnmatch \
formatter fpectl fractions ftplib functools gc getopt \
getpass gettext glob grp gzip hashlib heapq hmac \
html http http imaplib imghdr importlib inspect io \
ipaddress itertools json keyword linecache locale \
logging lzma macpath mailbox mailcap marshal math \
mimetypes mmap modulefinder msilib msvcrt \
multiprocessing netrc nis nntplib numbers operator \
os os ossaudiodev parser pathlib pdb pickle \
pickletools pipes pkgutil platform plistlib poplib posix \
pprint pty pwd py_compile pyclbr queue quopri \
random re readline reprlib resource rlcompleter runpy \
sched select selectors shelve shlex shutil signal site \
smtpd smtplib sndhdr socket socketserver spwd \
sqlite3 ssl stat statistics string stringprep struct \
subprocess sunau symbol symtable sys sysconfig \
syslog tabnanny tarfile telnetlib tempfile termios \
textwrap threading time timeit tkinter token \
tokenize trace traceback tracemalloc tty turtle \
types unicodedata unittest urllib uu uuid venv warnings \
wave weakref webbrowser winreg winsound wsgiref \
xdrlib xml xmlrpc zipfile zipimport zlib

substylewords.11.2.$(file.patterns.py)=__future__ \
with_statement unicode_literals print_function

#~ statement.indent.$(file.patterns.py)=10 :
statement.indent.$(file.patterns.py)=5 class def elif else except finally \
for if try while with

statement.lookback.$(file.patterns.py)=0
block.start.$(file.patterns.py)=
block.end.$(file.patterns.py)=
lexer.python.keywords2.no.sub.identifiers=0

comment.block.python=#

# Registry
comment.block.registry=;;

# SQL
# Enables backslash as an escape character
sql.backslash.escapes=1

# Activate '#' based comments for MySQL with 1 or disable for Oracle with 0:
lexer.sql.numbersign.comment=0

# SciTE properties
comment.block.props=#
















# sma files are Small script (C-like)
file.patterns.cpp=*.c;*.cc;*.cpp;*.cxx;*.h;*.hh;*.hpp;*.hxx;*.ipp;*.m;*.mm;*.sma
file.patterns.cplusplus=*.cc;*.cpp;*.cxx
# jad = decompiled class files; pde = Processing.org sketch files
file.patterns.java=*.java;*.jad;*.pde
# pln, inc and t are SilkTest (4Test) files.
file.patterns.test=*.pln;*.inc;*.t
# es = JS dialect of Abobe for SVG
file.patterns.js=*.js;*.es;*.ts
file.patterns.cs=*.cs
file.patterns.rc=*.rc;*.rc2;*.dlg
file.patterns.idl=*.idl;*.odl
file.patterns.flash=*.as;*.asc;*.jsfl
file.patterns.ch=*.ch;*.chf;*.chs
file.patterns.vala=*.vala
file.patterns.go=*.go
file.patterns.pike=*.pike
file.patterns.swift=*.swift
file.patterns.c.like=$(file.patterns.cpp);$(file.patterns.cs);$(file.patterns.idl);$(file.patterns.java);$(file.patterns.js);$(file.patterns.flash);$(file.patterns.ch);$(file.patterns.vala);$(file.patterns.pike)

*source.patterns.cpp=$(file.patterns.c.like);
*source.patterns.resource=$(file.patterns.rc);*.def;

shbang.tcc=cpp
shbang.tinycc=cpp

filter.cpp=C/C++ (c cc cpp cxx cs vala h hh hxx hpp ipp dlg rc rc2 mak)|\
$(file.patterns.cpp);$(file.patterns.cs);$(file.patterns.rc);$(file.patterns.vala);*.mak;make*|
filter.java=Java (java)|*.java|
filter.js=JavaScript (js es ts)|$(file.patterns.js)|
filter.idl=IDL (idl odl)|$(file.patterns.idl)|
filter.test=SilkTest (pln inc t)|$(file.patterns.test)|
filter.flash=Flash (as asc jsfl)|$(file.patterns.flash)|
filter.ch=Ch (ch chf chs)|$(file.patterns.ch)|
filter.go=Go (go)|$(file.patterns.go)|
filter.pike=Pike (pike)|$(file.patterns.pike)|
filter.swift=Swift (swift)|$(file.patterns.swift)|

*filter.cpp=$(filter.cpp)
*filter.java=$(filter.java)
*filter.javascript=$(filter.js)
*filter.idl=$(filter.idl)

lexer.$(file.patterns.java)=cpp
lexer.$(file.patterns.cpp)=cpp
lexer.$(file.patterns.rc)=cpp
lexer.$(file.patterns.idl)=cpp
lexer.$(file.patterns.cs)=cpp
lexer.$(file.patterns.js)=cpp
lexer.$(file.patterns.test)=cpp
lexer.$(file.patterns.flash)=cpp
lexer.$(file.patterns.ch)=cpp
lexer.$(file.patterns.vala)=cpp
lexer.$(file.patterns.go)=cpp
lexer.$(file.patterns.pike)=cpp
lexer.$(file.patterns.swift)=cpp

*language.c=&C / C++|c||
*language.csharp=C&#|cs||
*language.java=&Java|java||
*language.javascript=Java&Script|js||
*language.resource=Reso&urce|rc||

keywordclass.cpp=alignas alignof and and_eq asm auto bitand bitor bool break \
case catch char char16_t char32_t class compl const const_cast constexpr continue \
decltype default delete do double dynamic_cast else enum explicit export extern false float for \
friend goto if inline int long mutable namespace new noexcept nullptr not not_eq \
operator or or_eq private protected public \
register reinterpret_cast return short signed sizeof static static_assert static_cast struct switch \
template this thread_local throw true try typedef typeid typename union unsigned using \
virtual void volatile wchar_t while xor xor_eq

directives.objective.c=\
@class @defs @protocol @required @optional @end \
@interface @public @package @protected @private @property \
@implementation @synthesize @dynamic \
@throw @try @catch @finally \
@synchronized @autoreleasepool \
@selector @encode \
@compatibility_alias

# Since Objective C and C++ share the .h extension, allow Objective C directives as keywords
# For stricter display of pure C++, specify keywords.$(file.patterns.cpp)=$(keywordclass.cpp)
keywords.$(file.patterns.cpp)=$(keywordclass.cpp) $(directives.objective.c)

# keywords2 is for highlighting user defined keywords or function calls or similar
#keywords2.$(file.patterns.cpp)=file

# keywords3 is for doc comment keywords, highlighted in style 17
#CPP doxygen
file.patterns.doxygen.langs=$(file.patterns.cpp);$(file.patterns.java)
keywordclass.doxygen=a addindex addtogroup anchor arg attention \
author b brief bug c class code date def defgroup deprecated dontinclude \
e em endcode endhtmlonly endif endlatexonly endlink endverbatim enum example exception \
f$ f[ f] file fn hideinitializer htmlinclude htmlonly \
if image include ingroup internal invariant interface latexonly li line link \
mainpage name namespace nosubgrouping note overload \
p page par param param[in] param[out] \
post pre ref relates remarks return retval \
sa section see showinitializer since skip skipline struct subsection \
test throw throws todo typedef union until \
var verbatim verbinclude version warning weakgroup $ @ \ & < > # { }
keywords3.$(file.patterns.doxygen.langs)=$(keywordclass.doxygen)

# keywords5 is for preprocessor definitions and will cause inactive code
# to be greyed out. This setting is a space separated list of definitions
# where a definition may be of the form NAME=VALUE or simply NAME.
#keywords5.$(file.patterns.cpp)=_MSC_VER SCI_NAMESPACE GTK_MAJOR_VERSION=2

word.chars.cxx=$(chars.alpha)$(chars.numeric)_#
word.characters.$(file.patterns.cpp)=$(word.chars.cxx)
calltip.cpp.word.characters=$(chars.alpha)$(chars.numeric)_
comment.block.cpp=//~
#comment.block.at.line.start.cpp=1
comment.stream.start.cpp=/*
comment.stream.end.cpp=*/
comment.box.start.cpp=/*
comment.box.middle.cpp= *
comment.box.end.cpp= */

# Folding
#fold.cpp.syntax.based=0
#fold.comment=0
#fold.cpp.comment.multiline=0
#fold.cpp.comment.explicit=0
#defaults for fold.cpp.explicit.start=//{ and fold.cpp.explicit.end=//}
#  can be replaced by defining custom strings, e.g. //[ and //]
#fold.cpp.explicit.start=//[
#fold.cpp.explicit.end=//]
#if fold strings are set to something like /*{{{ and /*}}} (Origami/WinF style fold strings), enable
#  fold.cpp.explicit.anywhere, allowing explicit fold points being anywhere, not just in line comments
#fold.cpp.explicit.anywhere=1
#fold.preprocessor=1
#fold.compact=1
#fold.at.else=1

file.patterns.c.except.cpp=$(file.patterns.cs);$(file.patterns.idl);*.java;$(file.patterns.flash);$(file.patterns.ch)
statement.indent.$(file.patterns.c.except.cpp)=5 case default do else for if while
statement.indent.$(file.patterns.cpp)=5 case default do else for if private protected public while
statement.end.$(file.patterns.c.like)=10 ;
statement.lookback.$(file.patterns.c.like)=20
block.start.$(file.patterns.c.like)=10 {
block.end.$(file.patterns.c.like)=10 }

#autocomplete.cpp.fillups=(

#styling.within.preprocessor=1
preprocessor.symbol.$(file.patterns.cpp)=#
preprocessor.start.$(file.patterns.cpp)=if ifdef ifndef
preprocessor.middle.$(file.patterns.cpp)=else elif
preprocessor.end.$(file.patterns.cpp)=endif

preprocessor.symbol.$(file.patterns.cs)=#
preprocessor.start.$(file.patterns.cs)=if region
preprocessor.middle.$(file.patterns.cs)=else elif
preprocessor.end.$(file.patterns.cs)=endif endregion

keywordclass.ch=\
auto array bool break case char class complex ComplexInf ComplexNaN \
const continue default delete \
do double else enum export extern float for foreach goto if Inf inline int \
long namespace NaN new NULL private public register restrict return short \
signed sizeof static string_t struct switch this typedef union unsigned \
using void volatile wchar_t while __declspec
keywords.$(file.patterns.ch)=$(keywordclass.ch)
word.chars.ch=$(chars.alpha)$(chars.numeric)_#
word.characters.$(file.patterns.ch)=$(word.chars.cxx)
comment.block.ch=//~
#comment.block.at.line.start.ch=1
comment.stream.start.ch=/*
comment.stream.end.ch=*/
comment.box.start.ch=/*
comment.box.middle.ch= *
comment.box.end.ch= */
preprocessor.symbol.$(file.patterns.ch)=#
preprocessor.start.$(file.patterns.ch)=if ifdef ifndef
preprocessor.middle.$(file.patterns.ch)=else elif
preprocessor.end.$(file.patterns.ch)=endif

keywordclass.cs=abstract as ascending base bool break by byte case catch char checked \
class const continue decimal default delegate descending do double else enum \
equals event explicit extern false finally fixed float for foreach from goto group if \
implicit in int interface internal into is join lock let long namespace new null \
object on operator orderby out override params private protected public \
readonly ref return sbyte sealed select short sizeof stackalloc static \
string struct switch this throw true try typeof uint ulong \
unchecked unsafe ushort using var virtual void volatile where while
keywords.$(file.patterns.cs)=$(keywordclass.cs)
word.characters.$(file.patterns.cs)=$(word.chars.cxx)

keywordclass.go=\
bool byte break case chan complex64 complex128 const continue defer default  \
else  for func go goto fallthrough false float32 float64 if import int interface int8 int16 int32 int64 \
len map nil package range return select string struct switch true type \
uint uintptr uint8 uint16 uint32 uint64  var
keywords.$(file.patterns.go)=$(keywordclass.go)

keywordclass.rc=\
ACCELERATORS ALT AUTO3STATE AUTOCHECKBOX AUTORADIOBUTTON \
BEGIN BITMAP BLOCK BUTTON CAPTION CHARACTERISTICS CHECKBOX CLASS \
COMBOBOX CONTROL CTEXT CURSOR DEFPUSHBUTTON DIALOG DIALOGEX DISCARDABLE \
EDITTEXT END EXSTYLE FONT GROUPBOX ICON LANGUAGE LISTBOX LTEXT \
MENU MENUEX MENUITEM MESSAGETABLE POPUP \
PUSHBUTTON RADIOBUTTON RCDATA RTEXT SCROLLBAR SEPARATOR SHIFT STATE3 \
STRINGTABLE STYLE TEXTINCLUDE VALUE VERSION VERSIONINFO VIRTKEY
keywords.$(file.patterns.rc)=$(keywordclass.rc)

keywordclass.idl=\
aggregatable allocate appobject arrays async async_uuid \
auto_handle \
bindable boolean broadcast byte byte_count \
call_as callback char coclass code comm_status \
const context_handle context_handle_noserialize \
context_handle_serialize control cpp_quote custom \
decode default defaultbind defaultcollelem \
defaultvalue defaultvtable dispinterface displaybind dllname \
double dual \
enable_allocate encode endpoint entry enum error_status_t \
explicit_handle \
fault_status first_is float \
handle_t heap helpcontext helpfile helpstring \
helpstringcontext helpstringdll hidden hyper \
id idempotent ignore iid_as iid_is immediatebind implicit_handle \
import importlib in include in_line int __int64 __int3264 interface \
last_is lcid length_is library licensed local long \
max_is maybe message methods midl_pragma \
midl_user_allocate midl_user_free min_is module ms_union \
ncacn_at_dsp ncacn_dnet_nsp ncacn_http ncacn_ip_tcp \
ncacn_nb_ipx ncacn_nb_nb ncacn_nb_tcp ncacn_np \
ncacn_spx ncacn_vns_spp ncadg_ip_udp ncadg_ipx ncadg_mq \
ncalrpc nocode nonbrowsable noncreatable nonextensible notify \
object odl oleautomation optimize optional out out_of_line \
pipe pointer_default pragma properties propget propput propputref \
ptr public \
range readonly ref represent_as requestedit restricted retval \
shape short signed size_is small source strict_context_handle \
string struct switch switch_is switch_type \
transmit_as typedef \
uidefault union unique unsigned user_marshal usesgetlasterror uuid \
v1_enum vararg version void wchar_t wire_marshal

keywordclass.msidl=handle
keywordclass.xpidl=attribute native noscript scriptable shared wstring inout
keywords.$(file.patterns.idl)=$(keywordclass.idl) $(keywordclass.xpidl)

# http://java.sun.com/docs/books/tutorial/java/nutsandbolts/_keywords.html
keywordclass.java=abstract assert boolean break byte case catch char class \
const continue default do double else enum extends final finally float for \
goto if implements import instanceof int interface long \
native new package private protected public \
return short static strictfp super switch synchronized this throw throws \
transient try var void volatile while
keywords.$(file.patterns.java)=$(keywordclass.java)

keywordclass.javascript=abstract boolean break byte case catch char class \
const continue debugger default delete do double else enum export extends \
final finally float for function goto if implements import in instanceof \
int interface long native new package private protected public \
return short static super switch synchronized this throw throws \
transient try typeof var void volatile while with
keywords.$(file.patterns.js)=$(keywordclass.javascript)

keywordclass.flash=add and break case catch class continue default delete do \
dynamic else eq extends false finally for function ge get gt if implements import in \
instanceof interface intrinsic le lt ne new not null or private public return \
set static super switch this throw true try typeof undefined var void while with

keywordclass2.flash=Array Arguments Accessibility Boolean Button Camera Color \
ContextMenu ContextMenuItem Date Error Function Key LoadVars LocalConnection Math \
Microphone Mouse MovieClip MovieClipLoader NetConnection NetStream Number Object \
PrintJob Selection SharedObject Sound Stage String StyleSheet System TextField \
TextFormat TextSnapshot Video Void XML XMLNode XMLSocket \
_accProps _focusrect _global _highquality _parent _quality _root _soundbuftime \
arguments asfunction call capabilities chr clearInterval duplicateMovieClip \
escape eval fscommand getProperty getTimer getURL getVersion gotoAndPlay gotoAndStop \
ifFrameLoaded Infinity -Infinity int isFinite isNaN length loadMovie loadMovieNum \
loadVariables loadVariablesNum maxscroll mbchr mblength mbord mbsubstring MMExecute \
NaN newline nextFrame nextScene on onClipEvent onUpdate ord parseFloat parseInt play \
prevFrame prevScene print printAsBitmap printAsBitmapNum printNum random removeMovieClip \
scroll set setInterval setProperty startDrag stop stopAllSounds stopDrag substring \
targetPath tellTarget toggleHighQuality trace unescape unloadMovie unLoadMovieNum updateAfterEvent

keywords.$(file.patterns.flash)=$(keywordclass.flash)
keywords2.$(file.patterns.flash)=$(keywordclass2.flash)

keywordclass.vala=if else switch case default break continue return yield for foreach in \
do while try catch finally throw

keywordclass2.vala=namespace interface class struct enum delegate signal errordomain \
construct get set value base const static var dynamic weak unowned virtual abstract \
override public protected private extern throws requires ensures yields out ref lock \
using true false null delete generic new this typeof sizeof as owned int string char bool

keywords.$(file.patterns.vala)=$(keywordclass.vala)
keywords2.$(file.patterns.vala)=$(keywordclass2.vala)

keywordclass.pike=constant enum if do for while else foreach case switch break continue \
return typeof catch class lambda import inherit static void int string float mixed object \
function program array mapping multiset
keywords.$(file.patterns.pike)=$(keywordclass.pike)

keywordclass.swift.declarations=class deinit enum extension func import init \
internal let operator private protocol public static struct subscript typealias var
keywordclass.swift.statements=break case continue default do else fallthrough \
for if in return switch where while
keywordclass.swift.expressions=as dynamicType false is nil self Self super \
true __COLUMN__ __FILE__ __FUNCTION__ __LINE__
# The contextual keywords are only keywords in particular contexts
keywordclass.swift.contextual=associativity convenience dynamic didSet final get \
infix inout lazy left mutating none nonmutating optional override postfix \
precedence prefix Protocol required right set Type unowned weak willSet

keywords.$(file.patterns.swift)=$(keywordclass.swift.declarations) \
$(keywordclass.swift.statements) $(keywordclass.swift.expressions) \
$(keywordclass.swift.contextual)

# Substyles can be used for extra lists of highlighted identifiers and doc comment keywords
# Identifiers
#substyles.cpp.11=2
#substylewords.11.1.$(file.patterns.cpp)=std map string vector
#style.cpp.11.1=fore:#EE00AA
#style.cpp.75.1=$(style.cpp.75),fore:#BB6666
# Doc comment keywords
#substyles.cpp.17=1
#style.cpp.17.1=$(style.cpp.17),fore:#00AAEE
#style.cpp.81.1=$(style.cpp.81),fore:#6699AA
#substylewords.17.1.$(file.patterns.cpp)=check

# Markers
# keywords6.$(file.patterns.c.like)=FIXME TODO XXX HACK UnresolvedMergeConflict UNDONE

#styling.within.preprocessor=1
#lexer.cpp.allow.dollars=1
#lexer.cpp.track.preprocessor=1
#lexer.cpp.update.preprocessor=1
# For C# leave lexer.cpp.verbatim.strings.allow.escapes as 0 but change to 1 for Objective C
#lexer.cpp.verbatim.strings.allow.escapes=1
#lexer.cpp.triplequoted.strings=1
#lexer.cpp.hashquoted.strings=1
#lexer.cpp.backquoted.strings=1
#lexer.cpp.escape.sequence=1

#lexer.cpp.escape.sequence=1









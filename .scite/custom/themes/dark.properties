###
#  scite dark theme
#  append to end of SciTEGlobal.properties
#  or place to SciTEUser.properties
#  features:
#  - scite dark theme
#  - python/Go/markdown dark theme
#  - spell checker
#  Robert Wang
#  Nov 15, 2017

# Personalized by Red_M

#  GUI




lexer.python.keywords2.no.sub.identifiers=0

#  add Go/markdown
source.files=*.asm;*.c;*.cc;*.cpp;*.cxx;*.cs;*.h;*.hh;*.hxx;*.hpp;\
*.idl;*.odl;*.rc;*.rc2;*.dlg;*.def;\
*.vb;*.vbs;*.bas;*.frm;*.cls;*.ctl;\
*.java;*.js;*.py;*.pyw;*.pl;*.rb;*.cgi;*.lua;*.conf;\
make*;*.mak;\
*.properties;*.html;*.xml;*.iface;*.bat;*.e;*.m;*.mm;\
*.sh;*.patch;*.go;*.md










file.patterns.py=*.py;*.pyw
file.patterns.scons=SConstruct;SConscript

shbang.python=py

filter.python=Python (py pyw)|$(file.patterns.py)|

lexer.$(file.patterns.py)=python
lexer.$(file.patterns.scons)=python

keywordclass.python2=and as assert break class continue def del elif \
else except exec finally for from global if import in is lambda not \
or pass print raise return try while with yield

keywordclass.python3=False None True and as assert break class continue \
def del elif else except finally for from global if import in is lambda \
nonlocal not or pass raise return try while with yield

keywordclass.python=$(keywordclass.python3)

# Extra keywords for cython
keywordclass.cython=cdef cimport cpdef

keywords.$(file.patterns.py)=$(keywordclass.python) $(keywordclass.cython)
keywords.$(file.patterns.scons)=$(keywordclass.python)

# If you uncomment the 3 lines below,
# and put some words after "keywordclass2.python=",
# those words will be styled by style.python.14

keywordclass2.python=print self
keywords2.$(file.patterns.py)=$(keywordclass2.python)
keywords2.$(file.patterns.scons)=$(keywordclass2.python)

# Use 2 sets of substyles to highlight standard library modules and
# imports from the future.
# Additional identifier sets can be added by incrementing the  next
# line's value and adding extra definitions similar to below.
substyles.python.11=0

substylewords.11.1.$(file.patterns.py)=\
__main__ _dummy_thread _thread abc aifc argparse \
array ast asynchat asyncio asyncore atexit audioop \
base64 bdb binascii binhex bisect builtins bz2 \
calendar cgi cgitb chunk cmath cmd code codecs \
codeop collections colorsys compileall concurrent \
configparser contextlib copy copyreg crypt csv \
ctypes curses datetime dbm decimal difflib dis \
distutils dummy_threading email ensurepip enum \
errno faulthandler fcntl filecmp fileinput fnmatch \
formatter fpectl fractions ftplib functools gc getopt \
getpass gettext glob grp gzip hashlib heapq hmac \
html http http imaplib imghdr importlib inspect io \
ipaddress itertools json keyword linecache locale \
logging lzma macpath mailbox mailcap marshal math \
mimetypes mmap modulefinder msilib msvcrt \
multiprocessing netrc nis nntplib numbers operator \
os os ossaudiodev parser pathlib pdb pickle \
pickletools pipes pkgutil platform plistlib poplib posix \
pprint pty pwd py_compile pyclbr queue quopri \
random re readline reprlib resource rlcompleter runpy \
sched select selectors shelve shlex shutil signal site \
smtpd smtplib sndhdr socket socketserver spwd \
sqlite3 ssl stat statistics string stringprep struct \
subprocess sunau symbol symtable sys sysconfig \
syslog tabnanny tarfile telnetlib tempfile termios \
textwrap threading time timeit tkinter token \
tokenize trace traceback tracemalloc tty turtle \
types unicodedata unittest urllib uu uuid venv warnings \
wave weakref webbrowser winreg winsound wsgiref \
xdrlib xml xmlrpc zipfile zipimport zlib
#style.python.11.1=fore:#DD9900

substylewords.11.2.$(file.patterns.py)=__future__ \
with_statement unicode_literals print_function
#style.python.11.2=fore:#EE00AA

#statement.indent.$(file.patterns.py)=10 :
statement.indent.$(file.patterns.py)=5 class def elif else except finally \
for if try while with

statement.lookback.$(file.patterns.py)=0
block.start.$(file.patterns.py)=
block.end.$(file.patterns.py)=

comment.block.python=#








# Misc colours
fold.margin.colour=#505050
fold.margin.highlight.colour=#272822
whitespace.fore=#508050
selection.back=#FFFFFF
caret.fore=#FFFFFF
# Additional caret and selection settings
selection.alpha=99
caret.line.back=#aeaeaf
caret.line.back.alpha=30

# Give symbolic names to the set of colours used in the standard styles.
colour.code.comment.box=fore:#75715e,back:#272822
colour.code.comment.line=fore:#75715e
colour.code.comment.doc=fore:#75715e
colour.text.comment=fore:#75715e
colour.other.comment=fore:#75715e
colour.embedded.comment=back:#75715e
colour.embedded.js=back:#F0F0FF
colour.notused=back:#FF0000
colour.number=fore:#ae81ff
colour.keyword=fore:#f92672
colour.keyword2=fore:#A6E22E
colour.keyword3=fore:#66D9EF
colour.keyword4=fore:#FD971F
colour.string=fore:#e6db74
colour.char=fore:#e6db74
colour.operator=fore:#FFFFFF
colour.preproc=fore:#D0D000
colour.error=fore:#FFFF00,back:#A05050
colour.braces=fore:#FF6030
colour.brokenbraces=fore:#EE0000
colour.default=$(font.base),back:#272822,fore:#fcfcfc

# Global default styles for all languages
comment.block.makefile=#
# Default
style.*.32=$(colour.default)
# Line number
style.*.33=$(colour.default),back:#272822
# Brace highlight
style.*.34=$(colour.braces)
# Brace incomplete highlight
style.*.35=$(colour.brokenbraces)
# Control characters
style.*.36=$(colour.error)
# Indentation guides
style.*.37=fore:#999999

# Comment italique
style.*.1=$(colour.code.comment.box)
style.*.2=$(colour.code.comment.line)
style.*.3=$(colour.code.comment.doc)

# White space
style.*.0=fore:#FFFFFF
# Number
style.*.4=$(colour.number)

# Keyword
style.cpp.5=$(colour.keyword)

# Double quoted string
style.*.6=$(colour.string)
# Single quoted string
style.*.7=$(colour.string)
# UUIDs (only in IDL)
style.*.8=fore:#7F7F00
# Preprocessor
style.*.9=$(colour.preproc)
# Operators
style.*.10=$(colour.operator)

# Identifiers
style.*.11=
# End of line where string is not closed
style.*.12=$(colour.string)
# Verbatim strings for C#
style.*.13=$(colour.string)
# Regular expressions for JavaScript
style.*.14=$(colour.string)
# Doc Comment Line
style.*.15=$(colour.code.comment.doc)
# Keywords2
style.*.16=$(colour.keyword2)
# Comment keyword
style.*.17=fore:#3060A0,$(font.code.comment.doc)
# Comment keyword error
style.*.18=fore:#804020,$(font.code.comment.doc)

# Matched Operators
style.*.34=$(colour.braces),underlined
style.*.35=$(colour.brokenbraces)
# Braces are only matched in operator style
braces.*.style=10

# Makefile styles
# Default
style.makefile.0=$(colour.default)
# Comment: #
style.makefile.1=$(colour.code.comment.box),$(font.comment)
comment.block.makefile=#
# Pre-processor or other comment: !
style.makefile.2=$(colour.preproc)
# Variable: $(x)
style.makefile.3=fore:#f8f8f2
# Operator
style.makefile.4=$(colour.operator)
# Target
style.makefile.5=$(colour.preproc)
# Error
style.makefile.9=$(colour.error),eolfilled
# Matched Operators
style.makefile.34=$(colour.braces)
style.makefile.35=$(colour.brokenbraces)

# Batch styles
# Default
style.batch.0=$(colour.default)
# Comment (rem or ::)
style.batch.1=$(colour.code.comment.box),$(font.comment)
# Keywords
style.batch.2=$(colour.keyword)
# Label (line beginning with ':')
style.batch.3=$(colour.preproc),back:#494949,eolfilled
# Hide command character ('@')
style.batch.4=$(colour.preproc)
# External commands
style.batch.5=fore:#007090,$(font.monospace)
# Variable: %%x (x is almost whatever, except space and %), %n (n in [0-9]), %EnvironmentVar%
style.batch.6=$(colour.default)
# Operator: * ? < > |
style.batch.7=$(colour.operator)

# Bash styles
# Default
style.bash.32=$(colour.default)
# White space
style.bash.0=$(colour.default)
# Error
style.bash.1=$(colour.error)
# Comment
style.bash.2=$(colour.code.comment.box)
# Number
style.bash.3=$(colour.number)
# Keyword
style.bash.4=$(colour.keyword)
# Double quoted string
style.bash.5=$(colour.string)
# Single quoted string
style.bash.6=$(colour.char)
# Operators
style.bash.7=$(colour.operator)
# Identifiers (functions, etc.)
style.bash.8=$(colour.default)
# Scalars: $var
style.bash.9=$(colour.keyword4)
# Parameter expansion: ${var}
style.bash.10=$(colour.keyword4)
# Back Ticks
style.bash.11=$(colour.string)
# Here-doc (delimiter)
style.bash.12=$(colour.string)
# Here-doc (single quoted, q)
style.bash.13=fore:#7F007F
# Braces are only matched in operator style
braces.bash.style=7

# PHP
# Default
style.hypertext.118=$(colour.default)
# Matching braces
style.hypertext.34=$(colour.default)
# Not maching braces
style.hypertext.35=$(colour.error)
# Double quoted String
style.hypertext.119=$(colour.string)
# Single quoted string
style.hypertext.120=$(colour.char)
# Keyword
style.hypertext.121=$(colour.keyword)
# Number
style.hypertext.122=$(colour.number)
# Variable
style.hypertext.123=$(colour.keyword2)
# Comment
style.hypertext.124=$(colour.code.comment.box)
# One line comment
style.hypertext.125=$(colour.code.comment.box)
# PHP variable in double quoted string
style.hypertext.126=$(colour.other)
# PHP operator
style.hypertext.127=$(colour.default)

# Text
style.hypertext.0=$(colour.default)
# Tags
style.hypertext.1=$(colour.keyword3)
# Unknown Tags
style.hypertext.2=fore:#FF0000
# Attributes
style.hypertext.3=fore:#008080
# Unknown Attributes
style.hypertext.4=fore:#FF0000

# output window
style.errorlist.32=$(font.small)
style.errorlist.0=fore:#FFFFFF
style.errorlist.2=fore:#0FFFFF
style.errorlist.4=fore:#FFFFFF

# Python styles
# White space
style.python.0=
# Comment
style.python.1=$(colour.text.comment)
# Number
style.python.2=$(colour.number)
# String
style.python.3=$(colour.string)
# Single quoted string
style.python.4=$(colour.string)
# Keyword
style.python.5=$(colour.keyword)
# Triple quotes
style.python.6=$(colour.string)
# Triple double quotes
style.python.7=$(colour.string)
# Class name definition
style.python.8=$(colour.keyword4)
# Function or method name definition
style.python.9=$(colour.keyword4)
# Operators
style.python.10=$(colour.operator)
# Identifiers
style.python.11=
# Comment-blocks
style.python.12=$(colour.text.comment)
# End of line where string is not closed
style.python.13=$(colour.error)
# Highlighted identifiers
style.python.14=$(colour.keyword3)
# Decorators
style.python.15=$(colour.keyword3)
# Matched Operators
style.python.34=$(colour.braces)
style.python.35=$(colour.brokenbraces)
# Braces are only matched in operator style
braces.python.style=10

substylewords.11.2.$(file.patterns.py)=__future__ with_statement unicode_literals print_function
style.python.11.2=$(colour.keyword2)




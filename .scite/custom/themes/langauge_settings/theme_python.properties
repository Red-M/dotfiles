
file.patterns.py=*.py;*.pyw
file.patterns.scons=SConstruct;SConscript
shbang.python=py
filter.python=Python (py pyw)|$(file.patterns.py)|


lexer.$(file.patterns.py)=python
lexer.$(file.patterns.scons)=python

keywordclass.python2=and as assert break class continue def del elif \
else except exec finally for from global if import in is lambda not \
or pass print raise return try while with yield

keywordclass.python3=False None True and as assert break class continue \
def del elif else except finally for from global if import in is lambda \
nonlocal not or pass raise return try while with yield

keywordclass.python=$(keywordclass.python3)

# Extra keywords for cython
keywordclass.cython=cdef cimport cpdef

keywords.$(file.patterns.py)=$(keywordclass.python) $(keywordclass.cython)
keywords.$(file.patterns.scons)=$(keywordclass.python)

# If you uncomment the 3 lines below,
# and put some words after "keywordclass2.python=",
# those words will be styled by style.python.14

keywordclass2.python=print self
keywords2.$(file.patterns.py)=$(keywordclass2.python)
keywords2.$(file.patterns.scons)=$(keywordclass2.python)

# Use 2 sets of substyles to highlight standard library modules and
# imports from the future.
# Additional identifier sets can be added by incrementing the  next
# line's value and adding extra definitions similar to below.

substylewords.11.1.$(file.patterns.py)=\
__main__ _dummy_thread _thread abc aifc argparse \
array ast asynchat asyncio asyncore atexit audioop \
base64 bdb binascii binhex bisect builtins bz2 \
calendar cgi cgitb chunk cmath cmd code codecs \
codeop collections colorsys compileall concurrent \
configparser contextlib copy copyreg crypt csv \
ctypes curses datetime dbm decimal difflib dis \
distutils dummy_threading email ensurepip enum \
errno faulthandler fcntl filecmp fileinput fnmatch \
formatter fpectl fractions ftplib functools gc getopt \
getpass gettext glob grp gzip hashlib heapq hmac \
html http http imaplib imghdr importlib inspect io \
ipaddress itertools json keyword linecache locale \
logging lzma macpath mailbox mailcap marshal math \
mimetypes mmap modulefinder msilib msvcrt \
multiprocessing netrc nis nntplib numbers operator \
os os ossaudiodev parser pathlib pdb pickle \
pickletools pipes pkgutil platform plistlib poplib posix \
pprint pty pwd py_compile pyclbr queue quopri \
random re readline reprlib resource rlcompleter runpy \
sched select selectors shelve shlex shutil signal site \
smtpd smtplib sndhdr socket socketserver spwd \
sqlite3 ssl stat statistics string stringprep struct \
subprocess sunau symbol symtable sys sysconfig \
syslog tabnanny tarfile telnetlib tempfile termios \
textwrap threading time timeit tkinter token \
tokenize trace traceback tracemalloc tty turtle \
types unicodedata unittest urllib uu uuid venv warnings \
wave weakref webbrowser winreg winsound wsgiref \
xdrlib xml xmlrpc zipfile zipimport zlib

substylewords.11.2.$(file.patterns.py)=__future__ \
with_statement unicode_literals print_function

#~ statement.indent.$(file.patterns.py)=10 :
statement.indent.$(file.patterns.py)=5 class def elif else except finally \
for if try while with

statement.lookback.$(file.patterns.py)=0
block.start.$(file.patterns.py)=
block.end.$(file.patterns.py)=
lexer.python.keywords2.no.sub.identifiers=0

comment.block.python=#



# Python styles
# White space
style.python.0=
# Comment
style.python.1=$(colour.text.comment)
# Number
style.python.2=$(colour.number)
# String
style.python.3=$(colour.string)
# Single quoted string
style.python.4=$(colour.string)
# Keyword
style.python.5=$(colour.keyword)
# Triple quotes
style.python.6=$(colour.string)
# Triple double quotes
style.python.7=$(colour.string)
# Class name definition
style.python.8=$(colour.keyword4)
# Function or method name definition
style.python.9=$(colour.keyword4)
# Operators
style.python.10=$(colour.operator)
# Identifiers
style.python.11=
# style.python.11.1=$(colour.keyword2)
# style.python.11.2=$(colour.keyword2)
substyles.python.11=0
# Comment-blocks
style.python.12=$(colour.text.comment)
# End of line where string is not closed
style.python.13=$(colour.error)
# Highlighted identifiers
style.python.14=$(colour.keyword3)
# Decorators
style.python.15=$(colour.keyword3)
# F-String
style.python.16=$(colour.string)
# Single quoted f-string
style.python.17=$(colour.string)
# Triple quoted f-string
style.python.18=$(colour.string)
# Triple double quoted f-string
style.python.19=$(colour.string)
# Matched Operators
style.python.34=$(colour.braces)
style.python.35=$(colour.brokenbraces)
# Braces are only matched in operator style
braces.python.style=10

substylewords.11.2.$(file.patterns.py)=__future__ with_statement unicode_literals print_function
style.python.11.2=$(colour.keyword2)


